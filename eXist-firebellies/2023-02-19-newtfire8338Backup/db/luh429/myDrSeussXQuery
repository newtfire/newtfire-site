xquery version "3.1";
declare variable $ySpacer := 20;
declare variable $xSpacer := 30;
declare variable $increment1 := 2;
declare variable $increment2 := 50;
declare variable $increment3 := 5;
declare variable $increment4 := 50;
declare variable $increment5 := 50;
declare variable $color1 := "blue";
declare variable $color2 := "gray";
declare variable $xLegend := 15;
declare variable $yLegend := 40;
declare variable $thisFileContent :=

<html>
    <head>
        <title>Seuss</title>
    </head>
    <body style="margin: 0px;">
                
        <div class="text">
                
            <h2>
                Dr. Seuss Book Data Overview
            </h2>
                
        <svg id="CharacterCount" class="graph" height="450">
                
            {
            let $book := collection('/db/seuss/tsg-xml/')
            for $i in (0 to 9)
            for $b at $pos in $book
            let $title := $b//title =>data()
            let $char := $b//char/@name =>distinct-values()
            return
                
            <g transform="translate(100,210)">
                
                <text x="20" y="-185" fill="{$color1}" font-size="25" >Character Count</text>
                <line x1="0" y1="0" x2="0" y2="-{$i * $ySpacer}" stroke="{$color1}" stroke-width="1" />
                <line x1="0" y1="0" x2="{$pos * $xSpacer + $xSpacer}" y2="0" stroke="{$color1}" stroke-width="1" />
                
                <text x="100" y="-25" fill="{$color1}" font-size="15" transform="rotate(-90)" text-anchor="middle">Number of Characters</text>
                <text x="-15" y="-{$i * $ySpacer + 0.5}" fill="{$color1}" font-size="10">{$i * $increment1}</text>
                <line x1="1" y1="-{$i * $ySpacer + 0.5}" x2="{$pos * $xSpacer + $xSpacer}" y2="-{$i * $ySpacer + 0.5}" style="stroke-dasharray: 1 1 1 1" stroke="{$color2}" />
                
                <text x="0" y="20" fill="{$color1}" font-size="15">Books</text>
                <text x="30" y="-{$pos * $xSpacer - 5}" fill="{$color1}" transform="rotate(90)" font-size="10">{$b//title =>data()}</text>
                <line x1="{$pos * $xSpacer}" x2="{$pos * $xSpacer}" y1="-0.5" y2="-{$char=>count() * $ySpacer div $increment1  + 0.5}" stroke="#fbb03b" stroke-width="{$xSpacer div 2}"/>
             
                <text x="-75" y="75" fill="{$color1}" font-size="15">Mean: {round($book//char/@name =>distinct-values() =>count() div $book//title =>count())}</text>
                
                <text x="-75" y="90" fill="{$color1}" font-size="15">Total: {$book//char/@name =>distinct-values() =>count()}</text>
                
                <text x="{$pos * $xSpacer - 3.5}" y="-{$char=>count() * $ySpacer div $increment1  + 2}">{$char=>count()}</text>
            </g>
            }
        </svg>
                
        <svg id="LineCount" class="graph" height="450">
                
            {
            let $book := collection('/db/seuss/tsg-xml/')
            for $i in (0 to 9)
            for $b at $pos in $book
            let $title := $b//title =>data()
            let $lineS := $b//s =>count()
            let $lineL := $b//l =>count()
            let $line := $lineS + $lineL
            return
                
            <g transform="translate(100,210)">
                
                <text x="20" y="-185" fill="{$color1}" font-size="25" >Line Count</text>
                <line x1="0" y1="0" x2="0" y2="-{$i * $ySpacer}" stroke="{$color1}" stroke-width="1" />
                <line x1="0" y1="0" x2="{$pos * $xSpacer + $xSpacer}" y2="0" stroke="{$color1}" stroke-width="1" />
                
                <text x="100" y="-25" fill="{$color1}" font-size="15" transform="rotate(-90)" text-anchor="middle">Number of Lines</text>
                <text x="-15" y="-{$i * $ySpacer + 0.5}" fill="{$color1}" font-size="10">{$i * $increment2}</text>
                <line x1="1" y1="-{$i * $ySpacer + 0.5}" x2="{$pos * $xSpacer + $xSpacer}" y2="-{$i * $ySpacer + 0.5}" style="stroke-dasharray: 1 1 1 1" stroke="{$color2}" />
                
                <text x="0" y="20" fill="{$color1}" font-size="15">Books</text>
                <text x="30" y="-{$pos * $xSpacer - 5}" fill="{$color1}" transform="rotate(90)" font-size="10">{$b//title =>data()}</text>
                <line x1="{$pos * $xSpacer}" x2="{$pos * $xSpacer}" y1="-0.5" y2="-{$line * $ySpacer div $increment2 + 0.5}" stroke="#f49de4" stroke-width="{$xSpacer div 2}"/>
                
                <text x="-75" y="75" fill="{$color1}" font-size="15">Mean: {round(($book//s =>count() + $book//l =>count()) div $book//title =>count())}</text>
                
                <text x="-75" y="90" fill="{$color1}" font-size="15">Total: {$book//s =>count() + $book//l =>count()}</text>
                
                <text x="{$pos * $xSpacer - 3.5}" y="-{$line * $ySpacer div $increment2  + 2}">{$line}</text>
            </g>
            }
        </svg>
            
            
        <svg id="MadeUpWordsCount" class="graph" height="450">
                
            {
            let $book := collection('/db/seuss/tsg-xml/')
            for $i in (0 to 9)
            for $b at $pos in $book
            let $title := $b//title =>data()
            let $mUp := $b//mUp =>distinct-values()
            return
                
            <g transform="translate(100,210)">
                
                <text x="20" y="-185" fill="{$color1}" font-size="25" >Made up Word Count</text>
                <line x1="0" y1="0" x2="0" y2="-{$i * $ySpacer}" stroke="{$color1}" stroke-width="1" />
                <line x1="0" y1="0" x2="{$pos * $xSpacer + $xSpacer}" y2="0" stroke="{$color1}" stroke-width="1" />
                
                <text x="100" y="-25" fill="{$color1}" font-size="15" transform="rotate(-90)" text-anchor="middle">Number of Made up Words</text>
                <text x="-15" y="-{$i * $ySpacer + 0.5}" fill="{$color1}" font-size="10">{$i * $increment3}</text>
                <line x1="1" y1="-{$i * $ySpacer + 0.5}" x2="{$pos * $xSpacer + $xSpacer}" y2="-{$i * $ySpacer + 0.5}" style="stroke-dasharray: 1 1 1 1" stroke="{$color2}" />
                
                <text x="0" y="20" fill="{$color1}" font-size="15">Books</text>
                <text x="30" y="-{$pos * $xSpacer - 5}" fill="{$color1}" transform="rotate(90)" font-size="10">{$b//title =>data()}</text>
                <line x1="{$pos * $xSpacer}" x2="{$pos * $xSpacer}" y1="-0.5" y2="-{$mUp =>count() * $ySpacer div $increment3 + 0.5}" stroke="#e8e336" stroke-width="{$xSpacer div 2}"/>
             
                <text x="-75" y="75" fill="{$color1}" font-size="15">Mean: {round($book//mUp =>distinct-values() =>count() div $book//title =>count())}</text>
             
             <text x="-75" y="90" fill="{$color1}" font-size="15">Total: {$book//mUp =>distinct-values() =>count()}</text>
             
                <text x="{$pos * $xSpacer - 3.5}" y="-{$mUp=>count() * $ySpacer div $increment3  + 2}">{$mUp=>count()}</text>
            </g>
            }
        </svg>
        
        <svg id="CharacterCountVSLineCount" class="graph" height="450">
                
            {
            let $book := collection('/db/seuss/tsg-xml/')
            for $i in (0 to 9)
            for $b at $pos in $book
            let $title := $b//title =>data()
            let $char := $b//char/@name =>distinct-values()
            let $lineS := $b//s =>count()
            let $lineL := $b//l =>count()
            let $line := $lineS + $lineL
            return
                
            <g transform="translate(100,210)">
                
                <text x="20" y="-185" fill="{$color1}" font-size="25" >Character Count vs Line Count</text>
                <line x1="0" y1="0" x2="0" y2="-{$i * $ySpacer}" stroke="{$color1}" stroke-width="1" />
                <line x1="0" y1="0" x2="{$pos * $xSpacer + $xSpacer}" y2="0" stroke="{$color1}" stroke-width="1" />
                
                <text x="100" y="-25" fill="{$color1}" font-size="15" transform="rotate(-90)" text-anchor="middle">Number of Characters</text>
                <text x="-15" y="-{$i * $ySpacer + 0.5}" fill="{$color1}" font-size="10">{$i * $increment4}</text>
                <line x1="1" y1="-{$i * $ySpacer + 0.5}" x2="{$pos * $xSpacer + $xSpacer}" y2="-{$i * $ySpacer + 0.5}" style="stroke-dasharray: 1 1 1 1" stroke="{$color2}" />
                
                <text x="0" y="20" fill="{$color1}" font-size="15">Books</text>
                <text x="30" y="-{$pos * $xSpacer - 5}" fill="{$color1}" transform="rotate(90)" font-size="10">{$b//title =>data()}</text>
                <line x1="{$pos * $xSpacer + 7}" x2="{$pos * $xSpacer + 7}" y1="-0.5" y2="-{$line * $ySpacer div $increment4 + 0.5}" stroke="#f49de4" stroke-width="{$xSpacer div 2}"/>
                <line x1="{$pos * $xSpacer}" x2="{$pos * $xSpacer}" y1="-0.5" y2="-{$char=>count() * $ySpacer div $increment4  + 0.5}" stroke="#fbb03b" stroke-width="{$xSpacer div 2}"/>
                
                <text x="{$pos * $xSpacer + 3.5}" y="-{$line * $ySpacer div $increment4  + 2}">{$line}</text>
                <text x="{$pos * $xSpacer - 3.5}" y="-{$char=>count() * $ySpacer div $increment4  + 2}">{$char=>count()}</text>
            </g>
            }
        </svg>
        
        <svg id="MadeUpWordsVSLineCount" class="graph" height="450">
                
            {
            let $book := collection('/db/seuss/tsg-xml/')
            for $i in (0 to 9)
            for $b at $pos in $book
            let $title := $b//title =>data()
            let $mUp := $b//mUp =>distinct-values()
            let $lineS := $b//s =>count()
            let $lineL := $b//l =>count()
            let $line := $lineS + $lineL
            return
                
            <g transform="translate(100,210)">
                
                <text x="20" y="-185" fill="{$color1}" font-size="25" >Made up Words vs Lines</text>
                <line x1="0" y1="0" x2="0" y2="-{$i * $ySpacer}" stroke="{$color1}" stroke-width="1" />
                <line x1="0" y1="0" x2="{$pos * $xSpacer + $xSpacer}" y2="0" stroke="{$color1}" stroke-width="1" />
                
                <text x="100" y="-25" fill="{$color1}" font-size="15" transform="rotate(-90)" text-anchor="middle">Number of Characters</text>
                <text x="-15" y="-{$i * $ySpacer + 0.5}" fill="{$color1}" font-size="10">{$i * $increment5}</text>
                <line x1="1" y1="-{$i * $ySpacer + 0.5}" x2="{$pos * $xSpacer + $xSpacer}" y2="-{$i * $ySpacer + 0.5}" style="stroke-dasharray: 1 1 1 1" stroke="{$color2}" />
                
                <text x="0" y="20" fill="{$color1}" font-size="15">Books</text>
                <text x="30" y="-{$pos * $xSpacer - 5}" fill="{$color1}" transform="rotate(90)" font-size="10">{$b//title =>data()}</text>
                <line x1="{$pos * $xSpacer + 7}" x2="{$pos * $xSpacer + 7}" y1="-0.5" y2="-{$line * $ySpacer div $increment5 + 0.5}" stroke="#f49de4" stroke-width="{$xSpacer div 2}"/>
                <line x1="{$pos * $xSpacer}" x2="{$pos * $xSpacer}" y1="-0.5" y2="-{$mUp=>count() * $ySpacer div $increment5  + 0.5}" stroke="#e8e336" stroke-width="{$xSpacer div 2}"/>
                
                <text x="{$pos * $xSpacer + 3.5}" y="-{$line * $ySpacer div $increment5  + 2}">{$line}</text>
                <text x="{$pos * $xSpacer - 3.5}" y="-{$mUp=>count() * $ySpacer div $increment5  + 2}">{$mUp=>count()}</text>
            </g>
            }
        </svg>
        
        <svg>
            <rect x="{$xLegend}" y="{$yLegend}" width="200" height="70" stroke="black" fill="white"/>
    
    <rect x="{$xLegend + 15}" y="{$yLegend + 15}" width="10" height="10" fill="#fbb03b"/>
    <rect x="{$xLegend + 15}" y="{$yLegend + 30}" width="10" height="10" fill="#f49de4"/>
    <rect x="{$xLegend + 15}" y="{$yLegend + 45}" width="10" height="10" fill="#e8e336"/>
    
    <text x="{$xLegend + 30}" y="{$yLegend + 25}">character count</text>
    <text x="{$xLegend + 30}" y="{$yLegend + 40}">line count</text>
    <text x="{$xLegend + 30}" y="{$yLegend + 55}">made up words count</text>
    
    <text x="{$xLegend}" y="{$yLegend - 5}">Legend:</text>
        </svg>
        
        {let $book := collection('/db/seuss/tsg-xml/')
            for $b at $pos in $book[1]
            let $title := $b//title =>data()
            let $char := $b//char/@name =>distinct-values()
            let $lineS := $b//s =>count()
            let $lineL := $b//l =>count()
            let $line := $lineS + $lineL
            let $mUp := $b//mUp =>distinct-values()
            let $sound := $b//sound =>distinct-values()
            let $genre := $b//metadata/@genre ! normalize-space()
            return
                
        <table border="1">
            <tr>
                <th></th> <th>Prose</th> <th>Rhyme</th>
            </tr>
            <tr>
                <th>Character Count</th> <td>{$book[descendant::metadata/@genre="prose"]//char =>count()}</td> <td>{$book[descendant::metadata/@genre="rhyme"]//char =>count()}</td>
            </tr>
            <tr>
                <th>Line Count</th> <td>{$book[descendant::metadata/@genre="prose"]//s =>count() + $book[descendant::metadata/@genre="prose"]//l =>count()}</td> <td>{$book[descendant::metadata/@genre="rhyme"]//s =>count() + $book[descendant::metadata/@genre="rhyme"]//l =>count()}</td>
            </tr>
            <tr>
                <th>Made Up Words Count</th> <td>{$book[descendant::metadata/@genre="prose"]//mUp =>count()}</td> <td>{$book[descendant::metadata/@genre="rhyme"]//mUp =>count()}</td>
            </tr>
            <tr>
                <th>Number of Book Types</th> <td>{$book//metadata[@genre="prose"] =>count()}</td> <td>{$book//metadata[@genre="rhyme"] =>count()}</td>
            </tr>
        </table>
        }
        
        </div>
        
        
        
        {
            let $book := collection('/db/seuss/tsg-xml/')
            for $b at $pos in $book
            let $title := $b//title =>data()
            let $char := $b//char/@name =>distinct-values()
            let $lineS := $b//s =>count()
            let $lineL := $b//l =>count()
            let $line := $lineS + $lineL
            let $mUp := $b//mUp =>distinct-values()
            let $sound := $b//sound =>distinct-values()
            let $genre := $b//metadata/@genre ! normalize-space()
            return
               
        <div class="text" id="{$pos}">
            
            <a class="return" href="#banner">
                - Return to top
            </a>
            
            <h2>
                {$title}
            </h2>
            
            <h3>
                Book Type: {$genre}
            </h3>
            
            <h3>
                Line Count: {$line}
            </h3>
            
            <div class="data">
            <h3>
                Characters:
            </h3>
            
            <ul>
            {
            for $c in $char
            return
                <li>{$c}</li>}
            </ul>
            
            <h3>
                Character Count: {$char =>count()}
            </h3>
            </div>
            
            <span class="vr"/>
            
            <div class="data">
            <h3>
                Made up Words:
            </h3>
            
            <ul>
            {
            for $m in $mUp
            return
                <li>{$m}</li>}
            </ul>
            
            <h3>
                Made up Word Count: {$mUp =>count()}
            </h3>
            </div>
            
            <span class="vr"/>
            
            <div class="data">
            <h3>
                Sounds:
            </h3>
            
            <ul>
            {
            for $s in $sound
            return
                <li>{$s}</li>}
            </ul>
            
            <h3>
                Sound Count: {$sound =>count()}
            </h3>
            </div>
                        
        </div>
        }
    </body>
</html>;
$thisFileContent