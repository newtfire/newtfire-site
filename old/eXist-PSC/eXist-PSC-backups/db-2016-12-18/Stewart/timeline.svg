xquery version "3.0"; 
declare default element namespace "http://www.w3.org/2000/svg"; 
declare namespace tei="http://www.tei-c.org/ns/1.0";

declare variable $mitfordColl := collection ('/db/mitford');
declare variable $lettersColl := collection('/db/mitford/letters');
declare variable $letterFiles := $lettersColl/*;
declare variable $letterDates := $lettersColl//tei:teiHeader//tei:msDesc//tei:head/tei:date/@when/tokenize(string(), '-')[1];
declare variable $minYear := min($letterDates);
declare variable $maxYear := max($letterDates);
declare variable $yearSpan := xs:integer($maxYear) - xs:integer($minYear);
declare variable $lineLength := $yearSpan * 365;
declare variable $HaydonLetters := $letterFiles[descendant::tei:titleStmt/tei:title/tei:persName/@ref="#Haydon"];
declare variable $HaydonDates := $HaydonLetters//tei:teiHeader//tei:msDesc//tei:head/tei:date/@when/string(); 
declare variable $minHaydon := min($HaydonDates);
declare variable $maxHaydon := max($HaydonDates);
declare variable $maxDay := xs:integer(format-date($maxHaydon, '[d]'));
declare variable $minHYear := xs:integer(format-date($minHaydon, '[Y]'));
declare variable $maxHYear := xs:integer(format-date($maxHaydon, '[Y]'));
declare variable $minDay := xs:integer(format-date($minHaydon, '[d]'));
declare variable $startYear := ($minHYear - xs:integer($minYear)) * 365;
declare variable $startHaydon := $startYear + $minDay;
declare variable $endYear := ($maxHYear - xs:integer($minYear)) * 365;
declare variable $endHaydon := xs:integer($endYear) + $maxDay;
declare variable $middleHaydon := (($endHaydon - $startHaydon) div 2) + 365;


(:declare variable $ThisFileContent := :)
<svg width="500" height="3000">
   <g transform="translate(150, 100)">
      <line x1="70" y1="0" x2="70" y2="{$lineLength}" style="stroke:purple;stroke-width:40"/>  
      <line x1="130" y1="{$startYear + $minDay}" x2="130" y2="{$endYear + $maxDay}" style="stroke:blue;stroke-width:20"/>
{
    for $i in (0 to $yearSpan)
    let $yearText := xs:integer($minYear) + $i
    let $yInt := $i*365
    let $letters := $letterDates[xs:integer(tokenize(string(), '-')[1])= $yearText]
    let $letterCount := count($letters)
    return 
        <g>
        <line x1="220" y1="{$yInt}" x2="0" y2="{$yInt}" style="stroke:black;stroke-width:2"/> 
        <text x="-35" y="{$yInt}">{$yearText}</text>
        <text x="-100" y="{$yInt+20}">Letters Coded: {$letterCount}</text>
        <circle cx="70" cy="{$yInt}" r="{$letterCount}" stroke="black" fill="white"/>
        </g>
}
      
   </g>
   
</svg>(:);

let $filename := "timeline.svg"
let $doc-db-uri := xmldb:store("/db/Stewart", $filename, $ThisFileContent)
return $doc-db-uri
Output at http://dxcvm05.psc.edu:8080/exist/rest/db/Stewart/timeline.svg :)

