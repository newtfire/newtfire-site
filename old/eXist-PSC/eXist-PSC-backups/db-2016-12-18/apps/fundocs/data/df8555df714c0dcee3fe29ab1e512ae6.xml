<?xml version="1.0" encoding="UTF-8"?>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2015-05-06T12:07:02.066-04:00</xqdoc:date><xqdoc:location>java:org.exist.xquery.functions.text.TextModule</xqdoc:location></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>http://exist-db.org/xquery/text</xqdoc:uri><xqdoc:name>text</xqdoc:name><xqdoc:comment><xqdoc:description>A module for text searching extension functions.</xqdoc:description></xqdoc:comment></xqdoc:module><xqdoc:functions><xqdoc:function><xqdoc:name>text:fuzzy-match-all</xqdoc:name><xqdoc:signature>text:fuzzy-match-all($source as node()*, $keyword as xs:string) as node()*</xqdoc:signature><xqdoc:comment><xqdoc:description>Fuzzy keyword search, which compares strings based on the Levenshtein distance (or edit distance). The function tries to match each of the keywords specified in the keyword string against the string value of each item in the sequence $source.</xqdoc:description><xqdoc:param>$source* The source</xqdoc:param><xqdoc:param>$keyword The keyword string</xqdoc:param><xqdoc:return>node()* : the sequence of nodes that match the keywords</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:fuzzy-match-any</xqdoc:name><xqdoc:signature>text:fuzzy-match-any($source as node()*, $keyword as xs:string) as node()*</xqdoc:signature><xqdoc:comment><xqdoc:description>Fuzzy keyword search, which compares strings based on the Levenshtein distance (or edit distance). The function tries to match any of the keywords specified in the keyword string against the string value of each item in the sequence $source.</xqdoc:description><xqdoc:param>$source* The source</xqdoc:param><xqdoc:param>$keyword The keyword string</xqdoc:param><xqdoc:return>node()* : the sequence of nodes that match the keywords</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:fuzzy-index-terms</xqdoc:name><xqdoc:signature>text:fuzzy-index-terms($term as xs:string?) as xs:string*</xqdoc:signature><xqdoc:comment><xqdoc:description>Compares the specified argument against the contents of the fulltext index. Returns a sequence of strings which are similar to the argument. Similarity is based on Levenshtein distance. This function may not be useful in its current form and is subject to change.</xqdoc:description><xqdoc:param>$term? The term</xqdoc:param><xqdoc:return>xs:string* : a sequence of strings which are similar to the argument $term</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:text-rank</xqdoc:name><xqdoc:signature>text:text-rank($text as node()?) as xs:double</xqdoc:signature><xqdoc:comment><xqdoc:description>This is just a skeleton for a possible ranking function. Don't use this.</xqdoc:description><xqdoc:param>$text? The text to rank</xqdoc:param><xqdoc:return>xs:double : the ranking of the text</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:match-count</xqdoc:name><xqdoc:signature>text:match-count($source as node()?) as xs:integer</xqdoc:signature><xqdoc:comment><xqdoc:description>Counts the number of fulltext matches within the nodes and subnodes in $source.</xqdoc:description><xqdoc:param>$source? The node and subnodes to do the fulltext match on</xqdoc:param><xqdoc:return>xs:integer : the count</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:index-terms</xqdoc:name><xqdoc:signature>text:index-terms($nodes as node()*, $start as xs:string?, $function as function, $returnMax as xs:int) as item()*</xqdoc:signature><xqdoc:comment><xqdoc:description>This function can be used to collect some information on the distribution of index terms within a set of nodes. The set of nodes is specified in the first argument $nodes. The function returns term frequencies for all terms in the index found in descendants of the nodes in $nodes. The second argument $start specifies a start string. Only terms starting with the specified character sequence are returned. If $nodes is the empty sequence, all terms in the index will be selected. $function is a function reference, which points to a callback function that will be called for every term occurrence. $returnMax defines the maximum number of terms that should be reported. The function reference for $function can be created with the util:function function. It can be an arbitrary user-defined function, but it should take exactly 2 arguments: 1) the current term as found in the index as xs:string, 2) a sequence containing four int values: a) the overall frequency of the term within the node set, b) the number of distinct documents in the node set the term occurs in, c) the current position of the term in the whole list of terms returned, d) the rank of the current term in the whole list of terms returned.</xqdoc:description><xqdoc:param>$nodes* The set of nodes in which the returned tokens occur</xqdoc:param><xqdoc:param>$start? The optional start string</xqdoc:param><xqdoc:param>$function The callback function reference</xqdoc:param><xqdoc:param>$returnMax The maximum number of terms to report</xqdoc:param><xqdoc:return>item()* : the results from the evaluation of the function reference</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:index-terms</xqdoc:name><xqdoc:signature>text:index-terms($nodes as node()*, $qnames as xs:QName+, $start as xs:string?, $function as function, $returnMax as xs:int) as item()*</xqdoc:signature><xqdoc:comment><xqdoc:description>This version of the index-terms function is to be used with indexes that were defined on a specific element or attribute QName. The second argument lists the QNames or elements or attributes for which occurrences should bereturned. Otherwise, the function behaves like the 4-argument version.</xqdoc:description><xqdoc:param>$nodes* The set of nodes in which the returned tokens occur</xqdoc:param><xqdoc:param>$qnames+ One or more element or attribute names for which index terms are returned</xqdoc:param><xqdoc:param>$start? The optional start string</xqdoc:param><xqdoc:param>$function The callback function reference</xqdoc:param><xqdoc:param>$returnMax The maximum number of terms to report</xqdoc:param><xqdoc:return>item()* : the results from the evaluation of the function reference</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:highlight-matches</xqdoc:name><xqdoc:signature>text:highlight-matches($source as text()*, $callback-function-ref as function, $parameters as item()*) as node()*</xqdoc:signature><xqdoc:comment><xqdoc:description>Highlight matching strings within text nodes that resulted from a fulltext search. When searching with one of the fulltext operators or functions, eXist keeps track of the fulltext matches within the text. Usually, the serializer will mark those matches by enclosing them into an 'exist:match' element. One can then use an XSLT stylesheet to replace those match elements and highlight matches to the user. However, this is not always possible, so Instead of using an XSLT to post-process the serialized output, the highlight-matches function provides direct access to the matching portions of the text within XQuery. The function takes a sequence of text nodes as first argument $source and a callback function (defined with util:function) as second parameter. $parameters may contain a sequence of additional values that will be passed to the callback functions third parameter. Text nodes without matches will be returned as they are. However, if the text contains a match marker, the matching character sequence is reported to the callback function, and the result of the function call is inserted into the resulting node set where the matching sequence occurred. For example, you can use this to mark all matching terms with a &lt;span class="highlight"&gt;abc&lt;/span&gt;.</xqdoc:description><xqdoc:param>$source* The sequence of text nodes</xqdoc:param><xqdoc:param>$callback-function-ref The callback function (defined with util:function)</xqdoc:param><xqdoc:param>$parameters* The sequence of additional values that will be passed to the callback functions third parameter.</xqdoc:param><xqdoc:return>node()* : the source with the added highlights</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:kwic-display</xqdoc:name><xqdoc:signature>text:kwic-display($text as text()*, $width as xs:positiveInteger, $callback-function as function, $parameters as item()*) as node()*</xqdoc:signature><xqdoc:comment><xqdoc:description>Deprecated: kwic functionality is now provided by an XQuery module, see http://exist-org/kwic.html.This function takes a sequence of text nodes in $a, containing matches from a fulltext search. It highlights matching strings within those text nodes in the same way as the text:highlight-matches function. However, only a defined portion of the text surrounding the first match (and maybe following matches) is returned. If the text preceding the first match is larger than the width specified in the second argument $b, it will be truncated to fill no more than (width - keyword-length) / 2 characters. Likewise, the text following the match will be truncated in such a way that the whole string sequence fits into width characters. The third parameter $c is a callback function (defined with util:function). $d may contain an additional sequence of values that will be passed to the last parameter of the callback function. Any matching character sequence is reported to the callback function, and the result of the function call is inserted into the resulting node set where the matching sequence occurred. For example, you can use this to mark all matching terms with a &lt;span class="highlight"&gt;abc&lt;/span&gt;. The callback function should take 3 or 4 arguments: 1) the text sequence corresponding to the match as xs:string, 2) the text node to which this match belongs, 3) the sequence passed as last argument to kwic-display. If the callback function accepts 4 arguments, the last argument will contain additional information on the match as a sequence of 4 integers: a) the number of the match if there's more than one match in a text node - the first match will be numbered 1; b) the offset of the match into the original text node string; c) the length of the match as reported by the index.</xqdoc:description><xqdoc:param>$text* The text nodes</xqdoc:param><xqdoc:param>$width The width</xqdoc:param><xqdoc:param>$callback-function The callback function</xqdoc:param><xqdoc:param>$parameters* The parameters passed into the last argument of the callback function</xqdoc:param><xqdoc:return>node()* : the results</xqdoc:return><xqdoc:deprecated>Improved kwic functionality is now provided by a separate XQuery module, see http://www.exist-db.org/exist/apps/doc/kwic.xml.
This function could be removed in the next major release version.</xqdoc:deprecated></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:kwic-display</xqdoc:name><xqdoc:signature>text:kwic-display($text as text()*, $width as xs:positiveInteger, $callback-function as function, $result-callback as function, $parameters as item()*) as node()*</xqdoc:signature><xqdoc:comment><xqdoc:description>This function takes a sequence of text nodes in $a, containing matches from a fulltext search. It highlights matching strings within those text nodes in the same way as the text:highlight-matches function. However, only a defined portion of the text surrounding the first match (and maybe following matches) is returned. If the text preceding the first match is larger than the width specified in the second argument $b, it will be truncated to fill no more than (width - keyword-length) / 2 characters. Likewise, the text following the match will be truncated in such a way that the whole string sequence fits into width characters. The third parameter $c is a callback function (defined with util:function). $d may contain an additional sequence of values that will be passed to the last parameter of the callback function. Any matching character sequence is reported to the callback function, and the result of the function call is inserted into the resulting node set where the matching sequence occurred. For example, you can use this to mark all matching terms with a &lt;span class="highlight"&gt;abc&lt;/span&gt;. The callback function should take 3 or 4 arguments: 1) the text sequence corresponding to the match as xs:string, 2) the text node to which this match belongs, 3) the sequence passed as last argument to kwic-display. If the callback function accepts 4 arguments, the last argument will contain additional information on the match as a sequence of 4 integers: a) the number of the match if there's more than one match in a text node - the first match will be numbered 1; b) the offset of the match into the original text node string; c) the length of the match as reported by the index.</xqdoc:description><xqdoc:param>$text* The text nodes</xqdoc:param><xqdoc:param>$width The width</xqdoc:param><xqdoc:param>$callback-function The callback function</xqdoc:param><xqdoc:param>$result-callback The result callback function</xqdoc:param><xqdoc:param>$parameters* The parameters passed into the last argument of the callback function</xqdoc:param><xqdoc:return>node()* : the results</xqdoc:return><xqdoc:deprecated>Improved kwic functionality is now provided by a separate XQuery module, see http://www.exist-db.org/exist/apps/doc/kwic.xml.
This function could be removed in the next major release version.</xqdoc:deprecated></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:filter</xqdoc:name><xqdoc:signature>text:filter($text as xs:string, $regularexpression as xs:string) as xs:string*</xqdoc:signature><xqdoc:comment><xqdoc:description>Filter substrings that match the regular expression in the text.</xqdoc:description><xqdoc:param>$text The text to filter</xqdoc:param><xqdoc:param>$regularexpression The regular expression to perform against the text</xqdoc:param><xqdoc:return>xs:string* : the substrings</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:groups</xqdoc:name><xqdoc:signature>text:groups($text as xs:string, $regularexpression as xs:string) as xs:string*</xqdoc:signature><xqdoc:comment><xqdoc:description>Tries to match the string in $text to the regular expression. Returns an empty sequence if the string does not match, or a sequence whose first item is the entire string, and whose following items are the matched groups.</xqdoc:description><xqdoc:param>$text The text to filter</xqdoc:param><xqdoc:param>$regularexpression The regular expression to perform against the text</xqdoc:param><xqdoc:return>xs:string* : an empty sequence if the string does not match, or a sequence whose first item is the entire string, and whose following items are the matched groups.</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:groups</xqdoc:name><xqdoc:signature>text:groups($text as xs:string, $regularexpression as xs:string, $flags as xs:string) as xs:string*</xqdoc:signature><xqdoc:comment><xqdoc:description>Tries to match the string in $text to the regular expression, using the flags specified. Returns an empty sequence if the string does not match, or a sequence whose first item is the entire string, and whose following items are the matched groups.</xqdoc:description><xqdoc:param>$text The text to filter</xqdoc:param><xqdoc:param>$regularexpression The regular expression to perform against the text</xqdoc:param><xqdoc:param>$flags The flags</xqdoc:param><xqdoc:return>xs:string* : an empty sequence if the string does not match, or a sequence whose first item is the entire string, and whose following items are the matched groups.</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:groups-regex</xqdoc:name><xqdoc:signature>text:groups-regex($text as xs:string, $regularexpression as xs:string) as xs:string*</xqdoc:signature><xqdoc:comment><xqdoc:description>Tries to match the string in $text to the regular expression. Returns an empty sequence if the string does not match, or a sequence whose first item is the entire string, and whose following items are the matched groups. Note:

The groups-regex() variants of the groups() functions are identical except that they avoid the translation of the specified regular expression from XPath2 to Java syntax. That is, the regular expression is evaluated as is, and must be valid according to Java regular expression syntax, rather than the more restrictive XPath2 syntax.</xqdoc:description><xqdoc:param>$text The text to filter</xqdoc:param><xqdoc:param>$regularexpression The regular expression to perform against the text</xqdoc:param><xqdoc:return>xs:string* : an empty sequence if the string does not match, or a sequence whose first item is the entire string, and whose following items are the matched groups.</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:groups-regex</xqdoc:name><xqdoc:signature>text:groups-regex($text as xs:string, $regularexpression as xs:string, $flags as xs:string) as xs:string*</xqdoc:signature><xqdoc:comment><xqdoc:description>Tries to match the string in $text to the regular expression, using the flags specified. Returns an empty sequence if the string does not match, or a sequence whose first item is the entire string, and whose following items are the matched groups. Note:

The groups-regex() variants of the groups() functions are identical except that they avoid the translation of the specified regular expression from XPath2 to Java syntax. That is, the regular expression is evaluated as is, and must be valid according to Java regular expression syntax, rather than the more restrictive XPath2 syntax.</xqdoc:description><xqdoc:param>$text The text to filter</xqdoc:param><xqdoc:param>$regularexpression The regular expression to perform against the text</xqdoc:param><xqdoc:param>$flags The flags</xqdoc:param><xqdoc:return>xs:string* : an empty sequence if the string does not match, or a sequence whose first item is the entire string, and whose following items are the matched groups.</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:make-token</xqdoc:name><xqdoc:signature>text:make-token($text as xs:string) as xs:string*</xqdoc:signature><xqdoc:comment><xqdoc:description>Split a string into tokens</xqdoc:description><xqdoc:param>$text The string to tokenize</xqdoc:param><xqdoc:return>xs:string* : a sequence of tokens</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:match-all</xqdoc:name><xqdoc:signature>text:match-all($source as node()*, $regular-expression as xs:string+) as node()*</xqdoc:signature><xqdoc:comment><xqdoc:description>Tries to match each of the regular expression strings against the keywords contained in the fulltext index. The keywords found are then compared to the node set in $source. Every node containing ALL of the keywords is copied to the result sequence. By default, a keyword is considered to match the pattern if any substring of the keyword matches. To change this behaviour, use the 3-argument version of the function and specify flag 'w'. With 'w' specified, the regular expression is matched against the entire keyword, i.e. 'explain.*' will match 'explained' , but not 'unexplained'.</xqdoc:description><xqdoc:param>$source* The node set that is to be searched for the keyword set</xqdoc:param><xqdoc:param>$regular-expression+ The regular expressions to be matched against the fulltext index</xqdoc:param><xqdoc:return>node()* : the sequence of all of the matching nodes</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:match-all</xqdoc:name><xqdoc:signature>text:match-all($source as node()*, $regular-expression as xs:string+, $flag as xs:string) as node()*</xqdoc:signature><xqdoc:comment><xqdoc:description>Tries to match each of the regular expression strings against the keywords contained in the fulltext index. The keywords found are then compared to the node set in $source. Every node containing ALL of the keywords is copied to the result sequence. By default, a keyword is considered to match the pattern if any substring of the keyword matches. To change this behaviour, use the 3-argument version of the function and specify flag 'w'. With 'w' specified, the regular expression is matched against the entire keyword, i.e. 'explain.*' will match 'explained' , but not 'unexplained'.</xqdoc:description><xqdoc:param>$source* The node set that is to be searched for the keyword set</xqdoc:param><xqdoc:param>$regular-expression+ The regular expressions to be matched against the fulltext index</xqdoc:param><xqdoc:param>$flag With 'w' specified, the regular expression is matched against the entire keyword, i.e. 'explain.*' will match 'explained' , but not 'unexplained'.</xqdoc:param><xqdoc:return>node()* : the sequence of all of the matching nodes</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:match-any</xqdoc:name><xqdoc:signature>text:match-any($source as node()*, $regular-expression as xs:string+) as node()*</xqdoc:signature><xqdoc:comment><xqdoc:description>Tries to match each of the regular expression strings against the keywords contained in the fulltext index. The keywords found are then compared to the node set in $source. Every node containing ANY of the keywords is copied to the result sequence. By default, a keyword is considered to match the pattern if any substring of the keyword matches. To change this behaviour, use the 3-argument version of the function and specify flag 'w'. With 'w' specified, the regular expression is matched against the entire keyword, i.e. 'explain.*' will match 'explained' , but not 'unexplained'.</xqdoc:description><xqdoc:param>$source* The node set that is to be searched for the keyword set</xqdoc:param><xqdoc:param>$regular-expression+ The regular expressions to be matched against the fulltext index</xqdoc:param><xqdoc:return>node()* : the sequence of all of the matching nodes</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:match-any</xqdoc:name><xqdoc:signature>text:match-any($source as node()*, $regular-expression as xs:string+, $flag as xs:string) as node()*</xqdoc:signature><xqdoc:comment><xqdoc:description>Tries to match each of the regular expression strings against the keywords contained in the fulltext index. The keywords found are then compared to the node set in $source. Every node containing ANY of the keywords is copied to the result sequence. By default, a keyword is considered to match the pattern if any substring of the keyword matches. To change this behaviour, use the 3-argument version of the function and specify flag 'w'. With 'w' specified, the regular expression is matched against the entire keyword, i.e. 'explain.*' will match 'explained' , but not 'unexplained'.</xqdoc:description><xqdoc:param>$source* The node set that is to be searched for the keyword set</xqdoc:param><xqdoc:param>$regular-expression+ The regular expressions to be matched against the fulltext index</xqdoc:param><xqdoc:param>$flag With 'w' specified, the regular expression is matched against the entire keyword, i.e. 'explain.*' will match 'explained' , but not 'unexplained'.</xqdoc:param><xqdoc:return>node()* : the sequence of all of the matching nodes</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:filter-nested</xqdoc:name><xqdoc:signature>text:filter-nested($node-set as node()*) as node()*</xqdoc:signature><xqdoc:comment><xqdoc:description>Filters out all nodes in the node set, which do have descendant nodes in the same node set.  This is useful if you do a combined query like //(a|b)[. &amp;= $terms] and some 'b' nodes are nested within 'a' nodes, but you only want to see the innermost matches, i.e. the 'b' nodes, not the 'a' nodes containing 'b' nodes.</xqdoc:description><xqdoc:param>$node-set* The node set</xqdoc:param><xqdoc:return>node()* : a node set containing nodes that do not have descendent nodes.</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:matches-regex</xqdoc:name><xqdoc:signature>text:matches-regex($input as xs:string*, $pattern as xs:string) as xs:boolean</xqdoc:signature><xqdoc:comment><xqdoc:description>The function returns true if $input matches the regular expression supplied as $pattern, if present; otherwise, it returns false.

If $input is the empty sequence, it is interpreted as the zero-length string.

Note:

The text:matches-regex() variants of the fn:matches() functions are identical except that they avoid the translation of the specified regular expression from XPath2 to Java syntax. That is, the regular expression is evaluated as is, and must be valid according to Java regular expression syntax, rather than the more restrictive XPath2 syntax.</xqdoc:description><xqdoc:param>$input* The input string</xqdoc:param><xqdoc:param>$pattern The pattern</xqdoc:param><xqdoc:return>xs:boolean : true if the pattern is a match, false otherwise</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>text:matches-regex</xqdoc:name><xqdoc:signature>text:matches-regex($input as xs:string*, $pattern as xs:string, $flags as xs:string) as xs:boolean</xqdoc:signature><xqdoc:comment><xqdoc:description>The function returns true if $input matches the regular expression supplied as $pattern as influenced by the value of $flags, if present; otherwise, it returns false.

The effect of calling this version of the function with the $flags argument set to a zero-length string is the same as using the other two argument version. Flags are defined in 7.6.1.1 Flags.

If $input is the empty sequence, it is interpreted as the zero-length string.

Note:

The text:matches-regex() variants of the fn:matches() functions are identical except that they avoid the translation of the specified regular expression from XPath2 to Java syntax. That is, the regular expression is evaluated as is, and must be valid according to Java regular expression syntax, rather than the more restrictive XPath2 syntax.An error is raised [err:FORX0001] if the value of $flags is invalid according to the rules described in section 7.6.1 Regular Expression Syntax.</xqdoc:description><xqdoc:param>$input* The input string</xqdoc:param><xqdoc:param>$pattern The pattern</xqdoc:param><xqdoc:param>$flags The flags</xqdoc:param><xqdoc:return>xs:boolean : true if the pattern is a match, false otherwise</xqdoc:return></xqdoc:comment></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>