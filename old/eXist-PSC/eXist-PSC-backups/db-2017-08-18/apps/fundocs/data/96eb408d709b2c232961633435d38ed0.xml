<?xml version="1.0" encoding="UTF-8"?>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2015-05-06T12:07:02.066-04:00</xqdoc:date><xqdoc:location>java:org.exist.xquery.modules.lucene.LuceneModule</xqdoc:location></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>http://exist-db.org/xquery/lucene</xqdoc:uri><xqdoc:name>ft</xqdoc:name><xqdoc:comment><xqdoc:description>A module for full text indexed searching based on Lucene.</xqdoc:description></xqdoc:comment></xqdoc:module><xqdoc:functions><xqdoc:function><xqdoc:name>ft:query</xqdoc:name><xqdoc:signature>ft:query($nodes as node()*, $query as item()) as node()*</xqdoc:signature><xqdoc:comment><xqdoc:description>Queries a node set using a Lucene full text index; a lucene index must already be defined on the nodes, because if no index is available on a node, nothing will be found. Indexes on descendant nodes are not used. The context of the Lucene query is determined by the given input node set. The query is specified either as a query string based on Lucene's default query syntax or as an XML fragment. See http://exist-db.org/lucene.html#N1029E for complete documentation.</xqdoc:description><xqdoc:param>$nodes* The node set to search using a Lucene full text index which is defined on those nodes</xqdoc:param><xqdoc:param>$query The query to search for, provided either as a string or text in Lucene's default query syntax or as an XML fragment to bypass Lucene's default query parser</xqdoc:param><xqdoc:return>node()* : all nodes from the input node set matching the query. match highlighting information will be available for all returned nodes. Lucene's match score can be retrieved via the ft:score function.</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>ft:query</xqdoc:name><xqdoc:signature>ft:query($nodes as node()*, $query as item(), $options as node()?) as node()*</xqdoc:signature><xqdoc:comment><xqdoc:description>Queries a node set using a Lucene full text index; a lucene index must already be defined on the nodes, because if no index is available on a node, nothing will be found. Indexes on descendant nodes are not used. The context of the Lucene query is determined by the given input node set. The query is specified either as a query string based on Lucene's default query syntax or as an XML fragment. See http://exist-db.org/lucene.html#N1029E for complete documentation.</xqdoc:description><xqdoc:param>$nodes* The node set to search using a Lucene full text index which is defined on those nodes</xqdoc:param><xqdoc:param>$query The query to search for, provided either as a string or text in Lucene's default query syntax or as an XML fragment to bypass Lucene's default query parser</xqdoc:param><xqdoc:param>$options? An XML fragment containing options to be passed to Lucene's query parser. The following options are supported (a description can be found in the docs):
&lt;options&gt;
   &lt;default-operator&gt;and|or&lt;/default-operator&gt;
   &lt;phrase-slop&gt;number&lt;/phrase-slop&gt;
   &lt;leading-wildcard&gt;yes|no&lt;/leading-wildcard&gt;
   &lt;filter-rewrite&gt;yes|no&lt;/filter-rewrite&gt;
&lt;/options&gt;</xqdoc:param><xqdoc:return>node()* : all nodes from the input node set matching the query. match highlighting information will be available for all returned nodes. Lucene's match score can be retrieved via the ft:score function.</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>ft:query-field</xqdoc:name><xqdoc:signature>ft:query-field($field as xs:string*, $query as item()) as node()*</xqdoc:signature><xqdoc:comment><xqdoc:description>Queries a Lucene field, which has to be explicitely created in the index configuration.</xqdoc:description><xqdoc:param>$field* The lucene field name.</xqdoc:param><xqdoc:param>$query The query to search for, provided either as a string or text in Lucene's default query syntax or as an XML fragment to bypass Lucene's default query parser</xqdoc:param><xqdoc:return>node()* : all nodes from the input node set matching the query. match highlighting information will be available for all returned nodes. Lucene's match score can be retrieved via the ft:score function.</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>ft:query-field</xqdoc:name><xqdoc:signature>ft:query-field($field as xs:string*, $query as item(), $options as node()?) as node()*</xqdoc:signature><xqdoc:comment><xqdoc:description>Queries a Lucene field, which has to be explicitely created in the index configuration.</xqdoc:description><xqdoc:param>$field* The lucene field name.</xqdoc:param><xqdoc:param>$query The query to search for, provided either as a string or text in Lucene's default query syntax or as an XML fragment to bypass Lucene's default query parser</xqdoc:param><xqdoc:param>$options? An XML fragment containing options to be passed to Lucene's query parser. The following options are supported (a description can be found in the docs):
&lt;options&gt;
   &lt;default-operator&gt;and|or&lt;/default-operator&gt;
   &lt;phrase-slop&gt;number&lt;/phrase-slop&gt;
   &lt;leading-wildcard&gt;yes|no&lt;/leading-wildcard&gt;
   &lt;filter-rewrite&gt;yes|no&lt;/filter-rewrite&gt;
&lt;/options&gt;</xqdoc:param><xqdoc:return>node()* : all nodes from the input node set matching the query. match highlighting information will be available for all returned nodes. Lucene's match score can be retrieved via the ft:score function.</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>ft:score</xqdoc:name><xqdoc:signature>ft:score($node as node()) as xs:float*</xqdoc:signature><xqdoc:comment><xqdoc:description>Returns a computed relevance score for the given node. The score is the sum of all relevance scores provided by Lucene for the node and its descendants. In general, the score will be a number between 0.0 and 1.0 if the query had $node as context. If the query targeted multiple descendants of $node (e.g. 'title' and 'author' within a 'book'), the score will be the sum of all sub-scores and may thus be greater than 1.</xqdoc:description><xqdoc:param>$node the context node</xqdoc:param><xqdoc:return>xs:float* : sum of all relevance scores provided by Lucene for all matches below the given context node</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>ft:optimize</xqdoc:name><xqdoc:signature>ft:optimize() as empty()</xqdoc:signature><xqdoc:comment><xqdoc:description>Calls Lucene's optimize method to merge all index segments into a single one. This is a costly operation and should not be used except for data sets which can be expected to remain unchanged for a while. The optimize will block the index for other write operations and may take some time. You need to be a user in group dba to call this function.</xqdoc:description><xqdoc:return>empty() : </xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>ft:index</xqdoc:name><xqdoc:signature>ft:index($documentPath as xs:string, $solrExression as node()) as empty()</xqdoc:signature><xqdoc:comment><xqdoc:description>Index an arbitrary chunk of (non-XML) data with Lucene. Syntax is inspired by Solr.</xqdoc:description><xqdoc:param>$documentPath URI path of document in database.</xqdoc:param><xqdoc:param>$solrExression XML syntax expected by Solr's add expression. Element should be called 'doc', e.g.&lt;doc&gt; &lt;field name="field1"&gt;data1&lt;/field&gt; &lt;field name="field2" boost="value"&gt;data2&lt;/field&gt; &lt;/doc&gt; </xqdoc:param><xqdoc:return>empty() : </xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>ft:index</xqdoc:name><xqdoc:signature>ft:index($documentPath as xs:string, $solrExression as node(), $close as xs:boolean) as empty()</xqdoc:signature><xqdoc:comment><xqdoc:description>Index an arbitrary chunk of (non-XML) data with Lucene. Syntax is inspired by Solr.</xqdoc:description><xqdoc:param>$documentPath URI path of document in database.</xqdoc:param><xqdoc:param>$solrExression XML syntax expected by Solr's add expression. Element should be called 'doc', e.g.&lt;doc&gt; &lt;field name="field1"&gt;data1&lt;/field&gt; &lt;field name="field2" boost="value"&gt;data2&lt;/field&gt; &lt;/doc&gt; </xqdoc:param><xqdoc:param>$close If true, close the Lucene document. Subsequent calls to ft:index will thus add to a new Lucene document. If false, the document remains open and is not flushed to disk. Call the ft:close function to explicitely close and flush the current document.</xqdoc:param><xqdoc:return>empty() : </xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>ft:close</xqdoc:name><xqdoc:signature>ft:close() as empty()</xqdoc:signature><xqdoc:comment><xqdoc:description>Close the current Lucene document and flush it to disk. Subsequent calls to ft:index will write to a new Lucene document.</xqdoc:description><xqdoc:return>empty() : </xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>ft:has-index</xqdoc:name><xqdoc:signature>ft:has-index($path as xs:string) as xs:boolean*</xqdoc:signature><xqdoc:comment><xqdoc:description>Check if the given document has a lucene index defined on it. This method will return true for both, indexes created via collection.xconf or manual index fields added to the document with ft:index.</xqdoc:description><xqdoc:param>$path Full path to the resource to check</xqdoc:param><xqdoc:return>xs:boolean* : </xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>ft:remove-index</xqdoc:name><xqdoc:signature>ft:remove-index($documentPath as xs:string) as empty()</xqdoc:signature><xqdoc:comment><xqdoc:description>Remove any (non-XML) Lucene index associated with the document identified by the path parameter. This function will only remove indexes which were manually created by the user via the ft:index function. Indexes defined in collection.xconf will NOT be removed. They are maintained automatically by the database. Please note that non-XML indexes will also be removed automatically if the associated document is deleted.</xqdoc:description><xqdoc:param>$documentPath URI path of document in database.</xqdoc:param><xqdoc:return>empty() : </xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>ft:search</xqdoc:name><xqdoc:signature>ft:search($path as xs:string*, $query as xs:string) as node()</xqdoc:signature><xqdoc:comment><xqdoc:description>Search for (non-XML) data with lucene</xqdoc:description><xqdoc:param>$path* URI paths of documents or collections in database. Collection URIs should end on a '/'.</xqdoc:param><xqdoc:param>$query query string</xqdoc:param><xqdoc:return>node() : All documents that are match by the query</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>ft:search</xqdoc:name><xqdoc:signature>ft:search($query as xs:string) as node()</xqdoc:signature><xqdoc:comment><xqdoc:description>Search for (non-XML) data with lucene</xqdoc:description><xqdoc:param>$query query string</xqdoc:param><xqdoc:return>node() : All documents that are match by the query</xqdoc:return></xqdoc:comment></xqdoc:function><xqdoc:function><xqdoc:name>ft:get-field</xqdoc:name><xqdoc:signature>ft:get-field($path as xs:string*, $field as xs:string) as xs:string*</xqdoc:signature><xqdoc:comment><xqdoc:description>Retrieve the stored content of a field.</xqdoc:description><xqdoc:param>$path* URI paths of documents or collections in database. Collection URIs should end on a '/'.</xqdoc:param><xqdoc:param>$field query string</xqdoc:param><xqdoc:return>xs:string* : All documents that are match by the query</xqdoc:return></xqdoc:comment></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>